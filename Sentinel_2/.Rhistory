library("fs")
library("lidR")
library("data.table")
library("raster")
library("rgdal")
library("mapview")
library("mapedit")
# library(jcolors)  # facultative, utilisee pour modifier les options lorsqu el'on affiche les nuages de pts
# library(lidRplugins)   # pour la fct de classification mais aussi certaines segmentationde houppiers
rm(list=ls())     # remove objects from the environement
gc()       # can help R to retunr memory to the operation system if a large object was removed
###################################################
######### Access to data
## directory where LAS or LAZ ((= compacted LAS) files are
### l'exemple sur les donnees Massane
mo_pulse="/run/user/1001/gvfs/smb-share:server=10.134.193.32,share=mo-pulse"
lasDpath="_DATA/2020_Massane/Lidar_Drone/tiles/"         # changer en fct du repertoire contenant les donnees las
lasDpath=file.path(mo_pulse, lasDpath)
cat("lasDpath :", lasDpath, "\n")
## s'il existe les nuages de points normaliees en hauteur (x,y,h), le catalogue correspondant peut aussi etre cree
## evite de recalculer le MNT
## n'existe pas pour la Massane
#lasDpath_H="D:/DATA/Ciron/ULM/FRISBEE_Ciron/01-Lidar/03-ALS_Hauteur/"
### Rque: les chemins peuvent etre recupereres de facon interactive avec choose.dir()
# lasDpath = choose.dir()    # attention ne fct plus avec les dernieres versions R; faire un file.choose() avant pour que marche
# lasDpath = dirname(file.choose())     # alternative pour recuperer le repertoire
## Create a catalog of las files
listlas = catalog(lasDpath)
## peut aussi se creer avec la nouvelle fct readALSLAScatalog
#listlas = readALSLAScatalog(lasDpath)
# print the names of the first 4 files in the catalog
listlas@data$filename[1:4]
# print the names of all the files in the catalog
listlas@data$filename
#Plot the limits of las tiles included in the catalog; can take some time if the data set is large
plot(listlas)
# To read a LAS file (here the first one)
las = readLAS(listlas@data$filename[2])
# One or more LAS files can also be selected interactively ; creates a new catalog
listlasext=catalog_select(listlas, mapview=FALSE) #, subset = "subset")  #select the file by clicking on the tile then "done" (bottom right in the windows) to end selection
plot(las)    # le fichier que l'on a lu precedemment et affecte e la variable las
str(las)
plot(filter_poi(las, Z < 750))
plot(filter_poi(las, Z < 720))
plot(filter_poi(las, Z < 750))    # a supprime le point isole de bruit (ici filtre applique juste pour l'affichage, le resultat n'est pas sauvegrde)
plot(filter_poi(las, Z < 720))
# ici j'ai fait un plot(listlas) pour choisir des coordonnees vers le milieu de la zone
Xc= 702500
Yc= 6154500
R=20     # si R grand l'extraction peut prendre du temps; poour des tests 50 OK
# pour les modeles qui son construit e partir de reeves terrain R = rayoin des placettes utilsees (souvent 15 m)
# Extraction du sous-nuage correspondant e une placette rectangulaire
xleft = Xc-R
ybottom = Yc-R
xright = Xc+R
ytop = Yc+R
plot1r = clip_rectangle(listlas, xleft, ybottom, xright, ytop)
library("fs")
library("lidR")
library("data.table")
library("raster")
library("rgdal")
library("mapview")
library("mapedit")
# library(jcolors)  # facultative, utilisee pour modifier les options lorsqu el'on affiche les nuages de pts
# library(lidRplugins)   # pour la fct de classification mais aussi certaines segmentationde houppiers
rm(list=ls())     # remove objects from the environement
gc()       # can help R to retunr memory to the operation system if a large object was removed
###################################################
######### Access to data
## directory where LAS or LAZ ((= compacted LAS) files are
### l'exemple sur les donnees Massane
mo_pulse="/run/user/1001/gvfs/smb-share:server=10.134.193.32,share=mo-pulse"
lasDpath="_DATA/2020_Massane/Lidar_Drone/tiles/"         # changer en fct du repertoire contenant les donnees las
lasDpath=file.path(mo_pulse, lasDpath)
cat("lasDpath :", lasDpath, "\n")
## s'il existe les nuages de points normaliees en hauteur (x,y,h), le catalogue correspondant peut aussi etre cree
## evite de recalculer le MNT
## n'existe pas pour la Massane
#lasDpath_H="D:/DATA/Ciron/ULM/FRISBEE_Ciron/01-Lidar/03-ALS_Hauteur/"
### Rque: les chemins peuvent etre recupereres de facon interactive avec choose.dir()
# lasDpath = choose.dir()    # attention ne fct plus avec les dernieres versions R; faire un file.choose() avant pour que marche
# lasDpath = dirname(file.choose())     # alternative pour recuperer le repertoire
listlas = catalog(lasDpath)
listlas
# print the names of the first 4 files in the catalog
listlas@data$filename[1:4]
# print the names of all the files in the catalog
listlas@data$filename
plot(listlas)
las = readLAS(listlas@data$filename[2])
las1 = readLAS(catalog_select(listlas, mapview=FALSE)) #,subset = "subset"))
library("fs")
library("lidR")
library("data.table")
library("raster")
library("rgdal")
library("mapview")
library("mapedit")
# library(jcolors)  # facultative, utilisee pour modifier les options lorsqu el'on affiche les nuages de pts
# library(lidRplugins)   # pour la fct de classification mais aussi certaines segmentationde houppiers
rm(list=ls())     # remove objects from the environement
gc()       # can help R to retunr memory to the operation system if a large object was removed
###################################################
######### Access to data
## directory where LAS or LAZ ((= compacted LAS) files are
### l'exemple sur les donnees Massane
mo_pulse="/run/user/1001/gvfs/smb-share:server=10.134.193.32,share=mo-pulse"
lasDpath="_DATA/2020_Massane/Lidar_Drone/tiles/"         # changer en fct du repertoire contenant les donnees las
lasDpath=file.path(mo_pulse, lasDpath)
cat("lasDpath :", lasDpath, "\n")
## s'il existe les nuages de points normaliees en hauteur (x,y,h), le catalogue correspondant peut aussi etre cree
## evite de recalculer le MNT
## n'existe pas pour la Massane
#lasDpath_H="D:/DATA/Ciron/ULM/FRISBEE_Ciron/01-Lidar/03-ALS_Hauteur/"
### Rque: les chemins peuvent etre recupereres de facon interactive avec choose.dir()
# lasDpath = choose.dir()    # attention ne fct plus avec les dernieres versions R; faire un file.choose() avant pour que marche
# lasDpath = dirname(file.choose())     # alternative pour recuperer le repertoire
## Create a catalog of las files
listlas = catalog(lasDpath)
library("fs")
library("lidR")
library("data.table")
library("raster")
library("rgdal")
library("mapview")
library("mapedit")
# library(jcolors)  # facultative, utilisee pour modifier les options lorsqu el'on affiche les nuages de pts
# library(lidRplugins)   # pour la fct de classification mais aussi certaines segmentationde houppiers
rm(list=ls())     # remove objects from the environement
gc()       # can help R to retunr memory to the operation system if a large object was removed
###################################################
######### Access to data
## directory where LAS or LAZ ((= compacted LAS) files are
### l'exemple sur les donnees Massane
mo_pulse="/run/user/1001/gvfs/smb-share:server=10.134.193.32,share=mo-pulse"
lasDpath="_DATA/2020_Massane/Lidar_Drone/tiles/"         # changer en fct du repertoire contenant les donnees las
lasDpath=file.path(mo_pulse, lasDpath)
cat("lasDpath :", lasDpath, "\n")
## s'il existe les nuages de points normaliees en hauteur (x,y,h), le catalogue correspondant peut aussi etre cree
## evite de recalculer le MNT
## n'existe pas pour la Massane
#lasDpath_H="D:/DATA/Ciron/ULM/FRISBEE_Ciron/01-Lidar/03-ALS_Hauteur/"
### Rque: les chemins peuvent etre recupereres de facon interactive avec choose.dir()
# lasDpath = choose.dir()    # attention ne fct plus avec les dernieres versions R; faire un file.choose() avant pour que marche
# lasDpath = dirname(file.choose())     # alternative pour recuperer le repertoire
## Create a catalog of las files
listlas = catalog(lasDpath)
library("fs")
library("lidR")
library("data.table")
library("raster")
library("rgdal")
library("mapview")
library("mapedit")
# library(jcolors)  # facultative, utilisee pour modifier les options lorsqu el'on affiche les nuages de pts
# library(lidRplugins)   # pour la fct de classification mais aussi certaines segmentationde houppiers
rm(list=ls())     # remove objects from the environement
gc()       # can help R to retunr memory to the operation system if a large object was removed
###################################################
######### Access to data
## directory where LAS or LAZ ((= compacted LAS) files are
### l'exemple sur les donnees Massane
mo_pulse="/run/user/1001/gvfs/smb-share:server=10.134.193.32,share=mo-pulse"
lasDpath="_DATA/2020_Massane/Lidar_Drone/tiles/"         # changer en fct du repertoire contenant les donnees las
lasDpath=file.path(mo_pulse, lasDpath)
cat("lasDpath :", lasDpath, "\n")
## s'il existe les nuages de points normaliees en hauteur (x,y,h), le catalogue correspondant peut aussi etre cree
## evite de recalculer le MNT
## n'existe pas pour la Massane
#lasDpath_H="D:/DATA/Ciron/ULM/FRISBEE_Ciron/01-Lidar/03-ALS_Hauteur/"
### Rque: les chemins peuvent etre recupereres de facon interactive avec choose.dir()
# lasDpath = choose.dir()    # attention ne fct plus avec les dernieres versions R; faire un file.choose() avant pour que marche
# lasDpath = dirname(file.choose())     # alternative pour recuperer le repertoire
## Create a catalog of las files
listlas = catalog(lasDpath)
## peut aussi se creer avec la nouvelle fct readALSLAScatalog
#listlas = readALSLAScatalog(lasDpath)
# print the names of the first 4 files in the catalog
listlas@data$filename[1:4]
# print the names of all the files in the catalog
listlas@data$filename
#Plot the limits of las tiles included in the catalog; can take some time if the data set is large
plot(listlas)
# To read a LAS file (here the first one)
las = readLAS(listlas@data$filename[2])
#installation
install.packages("git2r")
install.packages("devtools")
install.packages("ggplot2")
install.packages("ggpmisc")
install.packages("ggpubr")
install.packages("pracma")
devtools::install_github("hadley/devtools")
install.packages("sf")
install.packages("sf")
# ----------------------------------------------------------------------------------------------------------------------
# title: "0_Sentinel_2_Pre_Processing"
# author: Nathan CORROYEZ, UMR TETIS, Univ Montpellier, AgroParisTech, CIRAD, CNRS, INRAE, F-34196, Montpellier, France
# output: html_document
# last_update: "2023-10-24"
# ----------------------------------------------------------------------------------------------------------------------
# -------------------------------- (Optional) Clear the environment and free memory ------------------------------------
# rm(list=ls()) # Clear the global environment (remove all objects)
# gc() # Trigger the garbage collector to free up memory
# ----------------------------------------------------------------------------------------------------------------------
# --------------------------------------------------- Libraries --------------------------------------------------------
library("lidR")
library("data.table")
library("raster")
library("rgdal")
library("devtools")
library("gdalUtils")
library("sf")
library("devtools")
library(sen2r)
install.packages("sen2r")
library(sen2r)
library(sen2r)
library("sen2r")
install.packages("sen2r")
install.packages("jqr")
install.packages("jqr")
install.packages("geojson")
install.packages("protolite")
install.packages("protolite")
install.packages("protolite")
install.packages("geojson")
install.packages("geojsonio")
install.packages("sen2r")
library("sen2r")
library(zip)
library(preprocS2)
library("preprocS2")
install.packages("preprocS2")
devtools::install_gitlab('jbferet/preprocS2')
library("preprocS2")
install.packages("gdalUtils", type = "source")
install.packages("remotes")
install.packages("remotes")
remotes::install_github("ropensci/gdalUtils")
install.packages("gdalUtils", type = "source")
install.packages("gdalUtils", repos="http://R-Forge.R-project.org")
install.packages("rgeos")
install.packages("rgeos", type = "source")
install.packages("preprocS2")
devtools::install_gitlab('jbferet/preprocS2')
install.packages("/home/corroyez/Downloads/rgeos_0.6-4.tar.gz", repos = NULL, type = "source")
devtools::install_gitlab('jbferet/preprocS2')
detach("package:stars", unload = TRUE)
remove.packages("rgeos")
install.packages("/home/corroyez/Downloads/rgeos_0.5-5.tar.gz", repos = NULL, type = "source")
devtools::install_gitlab('jbferet/preprocS2')
library(stars, unload = TRUE)
detach("package:stars")
devtools::install_gitlab('jbferet/preprocS2')
install.packages("rgdal")
install.packages("rgdal")
install.packages("/home/corroyez/Downloads/rgdal_1.6-7.tar.gz", repos = NULL, type = "source")
devtools::install_gitlab('jbferet/preprocS2')
install.packages("broom", type="binary")
install.packages("stars", type="binary")
devtools::install_gitlab('jbferet/preprocS2')
remotes::install_version("stars", version = "0.5.5")
install.packages("tidyverse")
?readOGR
remove.packages("stars", lib="~/R/x86_64-pc-linux-gnu-library/4.3")
install.packages("stars")
install.packages("stars")
remotes::install_github("r-spatial/stars")
sessionInfo()
install.packages("stars", type = "source")
# ---
# title: "1.train_predict_prosail.R"
# author: Nathan CORROYEZ, UMR TETIS, Univ Montpellier, AgroParisTech, CIRAD, CNRS, INRAE, F-34196, Montpellier, France
# output: html_document
# last_update: "2024-02-13"
# ---
# ----------------------------- (Optional) Clear the environment and free memory -------------------------------------
rm(list=ls(all=TRUE)) # Clear the global environment (remove all objects)
gc() # Trigger the garbage collector to free up memory
# --------------------------------------------------------------------------------------------------------------------
# Define working directory as the directory where the script is located
if (rstudioapi::isAvailable()){
setwd(dirname(rstudioapi::getSourceEditorContext()$path));getwd()
}
# Import useful functions
source("functions_sentinel_2.R")
install.packages("stars", version=0.5-5)
sessionInfo()
install.packages("Rcpp")
install.packages("Rcpp")
install.packages("stars", type = "source")
remotes::install_version("stars", version = "0.5-5")
search()
update.packages(ask = FALSE)
install.packages("/home/corroyez/Downloads/stars_0.6-4.tar.gz")
sessionInfo()
remove.packages("stars")
